// PNW Ri3D: Team REDACTED
// Jon Grimm, Justin Grimm, Kevin Parsons
// 2015

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Forklift* Robot::forklift = 0;
Gripper* Robot::gripper = 0;
OI* Robot::oi = 0;

Timer* Robot::timer1 = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drive = new Drive();
	forklift = new Forklift();
	gripper = new Gripper();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	// FROM MIDDLE TO RIGHT PLATFORM autonomousCommand = new AutonomousCommand(0.725, 0.76, 1.7);
	// driveCommand = new DriveCommand(-0.125, -0.6, 2.955);
	autoCommandGroup = new AutoCommandGroup();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	timer1 = new Timer();
	RobotMap::compressor1->Start();
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autoCommandGroup != NULL)
		autoCommandGroup->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autoCommandGroup != NULL)
		autoCommandGroup->Cancel();

	timer1->Start();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	// Drive code
	float leftY, rightY;
	leftY = oi->getDriverJoy()->GetRawAxis(1) * -1.0;
	rightY = oi->getDriverJoy()->GetRawAxis(3);


	// Deadzone & squaring inputs
	leftY = (fabs(leftY) < 0.15 ?  0.0 : leftY * leftY * (leftY < 0.0 ? -1.0 : 1.0));
	rightY = (fabs(rightY) < 0.15 ?  0.0 : rightY * rightY * (rightY < 0.0 ? -1.0 : 1.0));

	Robot::drive->left1->Set(leftY);
	// Robot::drive->left2->Set(leftY);

	Robot::drive->right1->Set(rightY);
	// Robot::drive->right2->Set(rightY);

	// Forklift code
	float forkY;
	forkY = oi->getManipJoy()->GetRawAxis(1);

	// Deadzone & squaring inputs
	forkY = (fabs(forkY) < 0.15 ?  0.0 : forkY * forkY * (forkY < 0.0 ? -1.0 : 1.0));

	Robot::forklift->motor1->Set(forkY);
	Robot::forklift->motor2->Set(forkY * -1.0);

	if (timer1->HasPeriodPassed(1.0))
	{
		std::cout << "lefty = " << leftY << "    rightY = " << rightY << "    forkY = " << forkY << std::endl;
		timer1->Reset();
	}

}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

